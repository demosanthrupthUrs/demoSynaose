{
	"name": "NB_RDV_ADLS_QMI_REPORTING_MAPPINGS",
	"properties": {
		"folder": {
			"name": "QMI"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "azprodspkpool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e5de21d7-0439-4648-8e43-72630bcfefb4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d28b0a8d-0b16-416b-a51a-618a5a752781/resourceGroups/rg-as-dmaic-prod/providers/Microsoft.Synapse/workspaces/az-tsa-as-dmaic-prod-synapse-01/bigDataPools/azprodspkpool01",
				"name": "azprodspkpool01",
				"type": "Spark",
				"endpoint": "https://az-tsa-as-dmaic-prod-synapse-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azprodspkpool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"filePath = 'abfss://qmi-mappings@astestdmaicstor01.dfs.core.windows.net/qmi-mappingsLand/QMI_Reporting_Mappings.xlsx'\r\n",
					"schema = 'QMI_WORKING'\r\n",
					"database = 'aztsaasdmaictestsqlpools01'\r\n",
					"server = 'az-tsa-as-dmaic-test-synapse-01.sql.azuresynapse.net'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sheetName1 = 'Reporting_Structure'\r\n",
					"sheetName2 = 'Incident_Group'\r\n",
					"sheetName3 = 'Incident_Type'\r\n",
					"sheetName4 = 'Feedback_Group'\r\n",
					"sheetName5 = 'Feedback_Type'\r\n",
					"sheetName6 = 'Feedback_Rating'\r\n",
					"\r\n",
					"tableName1 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_REPORTING_STRUCTURE'\r\n",
					"tableName2 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_INCIDENT_GROUP'\r\n",
					"tableName3 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_INCIDENT_TYPE'\r\n",
					"tableName4 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_FEEDBACK_GROUP'\r\n",
					"tableName5 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_FEEDBACK_TYPE'\r\n",
					"tableName6 = 'VW_RDV_ADLS_QMI_REPORTING_MAPPINGS_FEEDBACK_RATING'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /NB_ADLS_RDV_COMMON"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"fullTblname1 = database+'.'+schema+'.'+tableName1\r\n",
					"df1 = spark.read.synapsesql(fullTblname1)\r\n",
					"df1.createOrReplaceTempView(tableName1)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tOrganisationId\\n\"\r\n",
					"\"\\t,Name_1\\n\"\r\n",
					"\"\\t,Name_2\\n\"\r\n",
					"\"\\t,Name_3\\n\"\r\n",
					"\"\\t,Name_4\\n\"\r\n",
					"\"\\t,Archived\\n\"\r\n",
					"\"\\t,Portfolio\\n\"\r\n",
					"\"\\t,Mission_Expression\\n\"\r\n",
					"\"\\t,Stream_Department\\n\"\r\n",
					"\"\\t,Specific_Service\\n\"\r\n",
					"\"\\tfrom \" + tableName1 + \" order by 1;\")\r\n",
					"\r\n",
					"dfRS = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfRS.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"bold\", \"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName1 + \"'!A1\")\\\r\n",
					"  .mode(\"overwrite\")\\\r\n",
					"  .save(filePath)\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullTblname2 = database+'.'+schema+'.'+tableName2\r\n",
					"df1 = spark.read.synapsesql(fullTblname2)\r\n",
					"df1.createOrReplaceTempView(tableName2)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tOriginal_Client_Incident_Group_Desc\\n\"\r\n",
					"\"\\t,Short_Client_Incident_Group_Desc\\n\"\r\n",
					"\"\\tfrom \" + tableName2 + \" order by 1;\")\r\n",
					"\r\n",
					"dfIG = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfIG.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"inferSchema\",\"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName2 + \"'!A1\")\\\r\n",
					"  .mode(\"append\")\\\r\n",
					"  .save(filePath)\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullTblname3 = database+'.'+schema+'.'+tableName3\r\n",
					"df1 = spark.read.synapsesql(fullTblname3)\r\n",
					"df1.createOrReplaceTempView(tableName3)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tOriginal_Client_Incident_Type_Desc\\n\"\r\n",
					"\"\\t,Short_Client_Incident_Type_Desc\\n\"\r\n",
					"\"\\tfrom \" + tableName3 + \" order by 1;\")\r\n",
					"\r\n",
					"dfIT = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfIT.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"inferSchema\",\"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName3 + \"'!A1\")\\\r\n",
					"  .mode(\"append\")\\\r\n",
					"  .save(filePath)\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullTblname4 = database+'.'+schema+'.'+tableName4\r\n",
					"df1 = spark.read.synapsesql(fullTblname4)\r\n",
					"df1.createOrReplaceTempView(tableName4)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tOriginal_Feedback_Group_Desc\\n\"\r\n",
					"\"\\t,Short_Feedback_Group_Desc\\n\"\r\n",
					"\"\\tfrom \" + tableName4 + \" order by 1;\")\r\n",
					"\r\n",
					"dfFG = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfFG.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"inferSchema\",\"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName4 + \"'!A1\")\\\r\n",
					"  .mode(\"append\")\\\r\n",
					"  .save(filePath)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullTblname5 = database+'.'+schema+'.'+tableName5\r\n",
					"df1 = spark.read.synapsesql(fullTblname5)\r\n",
					"df1.createOrReplaceTempView(tableName5)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tOriginal_Feedback_Type_Desc\\n\"\r\n",
					"\"\\t,Short_Feedback_Type_Desc\\n\"\r\n",
					"\"\\tfrom \" + tableName5 + \" order by 1;\")\r\n",
					"\r\n",
					"dfFT = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfFT.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"inferSchema\",\"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName5 + \"'!A1\")\\\r\n",
					"  .mode(\"append\")\\\r\n",
					"  .save(filePath)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fullTblname6 = database+'.'+schema+'.'+tableName6\r\n",
					"df1 = spark.read.synapsesql(fullTblname6)\r\n",
					"df1.createOrReplaceTempView(tableName6)\r\n",
					"\r\n",
					"strSelect = (\"Select \\n\"\r\n",
					"\"\\tModule_Code\\n\"\r\n",
					"\"\\t,Feedback_Rating_Number\\n\"\r\n",
					"\"\\t,Original_Feedback_Rating_Desc\\n\"\r\n",
					"\"\\t,Short_Feedback_Rating_Desc\\n\"\r\n",
					"\"\\tfrom \" + tableName6 + \" order by 1,2;\")\r\n",
					"\r\n",
					"dfFR = spark.sql(strSelect)\r\n",
					"\r\n",
					"dfFR.write.format(\"com.crealytics.spark.excel\")\\\r\n",
					"  .option(\"useHeader\", \"true\")\\\r\n",
					"  .option(\"inferSchema\",\"true\")\\\r\n",
					"  .option(\"dataAddress\", \"'\" + sheetName6 + \"'!A1\")\\\r\n",
					"  .mode(\"append\")\\\r\n",
					"  .save(filePath)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"rowsReadRS,rowsWrittenRS = reconExcelInsert(dfRS,sheetName1,filePath)\r\n",
					"rowsReadIG,rowsWrittenIG = reconExcelInsert(dfIG,sheetName2,filePath)\r\n",
					"rowsReadIT,rowsWrittenIT = reconExcelInsert(dfIT,sheetName3,filePath)\r\n",
					"rowsReadFG,rowsWrittenFG = reconExcelInsert(dfFG,sheetName4,filePath)\r\n",
					"rowsReadFT,rowsWrittenFT = reconExcelInsert(dfFT,sheetName5,filePath)\r\n",
					"rowsReadFR,rowsWrittenFR = reconExcelInsert(dfFR,sheetName6,filePath)\r\n",
					"\r\n",
					"\r\n",
					"rowsRead = rowsReadRS + rowsReadIG + rowsReadIT + rowsReadFG + rowsReadFT + rowsReadFR\r\n",
					"rowsWritten = rowsWrittenRS + rowsWrittenIG + rowsWrittenIT + rowsWrittenFG + rowsWrittenFT + rowsWrittenFR\r\n",
					"\r\n",
					"outputRows = str(rowsRead)+'|'+str(rowsWritten)\r\n",
					"mssparkutils.notebook.exit(outputRows) \r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			}
		]
	}
}