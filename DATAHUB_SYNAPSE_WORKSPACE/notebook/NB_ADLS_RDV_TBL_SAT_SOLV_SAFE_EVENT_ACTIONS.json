{
	"name": "NB_ADLS_RDV_TBL_SAT_SOLV_SAFE_EVENT_ACTIONS",
	"properties": {
		"folder": {
			"name": "QMI"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "azprodspkpool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "874ac7d6-cc44-4fed-96b0-f0adafc0d1ae"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d28b0a8d-0b16-416b-a51a-618a5a752781/resourceGroups/rg-as-dmaic-prod/providers/Microsoft.Synapse/workspaces/az-tsa-as-dmaic-prod-synapse-01/bigDataPools/azprodspkpool01",
				"name": "azprodspkpool01",
				"type": "Spark",
				"endpoint": "https://az-tsa-as-dmaic-prod-synapse-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azprodspkpool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"filePath = 'abfss://solv@asdevdmaicstor01.dfs.core.windows.net/solvLand/PRES_SolvSafety_Actions.parquet'\r\n",
					"etlRunID = '1'\r\n",
					"tableName = 'TBL_SAT_SOLV_SAFE_EVENT_ACTIONS'\r\n",
					"schema = 'RDV'\r\n",
					"database = 'aztsaasdmaicdevsqlpools01'\r\n",
					"server = 'az-tsa-as-dmaic-dev-synapse-01.sql.azuresynapse.net'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /NB_ADLS_RDV_COMMON"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"path, fileName = os.path.split(filePath)\r\n",
					"tempTableName, etlLoadID, strloadTime = setTemptableTime(fileName)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"strSQL = (\"SELECT \\n\" \r\n",
					"\"\\tActionID as SOLV_SAFE_EVENT_ACTIONS_BK\\n\"\r\n",
					"\"\\t,ActionID as ACTION_ID\\n\"\r\n",
					"\"\\t,CONCAT('SolvSafety','|',EventID) as EVENT_BK\\n\"\r\n",
					"\"\\t,EventID as EVENT_ID\\n\"\r\n",
					"\"\\t,Action as ACTION\\n\"\r\n",
					"\"\\t,Status as STATUS\\n\"\r\n",
					"\"\\t,Completed as COMPLETED\\n\"\r\n",
					"\"\\t,DueDate as DUE_DATE\\n\"\r\n",
					"\"\\t,FullDescription as FULL_DESCRIPTION\\n\"\r\n",
					"\"\\t,OwnerName as OWNER_NAME\\n\"\r\n",
					"\"\\t,CompletedByName as COMPLETED_BY_NAME\\n\"\r\n",
					"\"\\t,CompletedDate as COMPLETED_DATE\\n\"\r\n",
					"\"\\t,CreatedByName as CREATED_BY_NAME\\n\"\r\n",
					"\"\\t,CreatedDate as CREATED_DATE\\n\"\r\n",
					"\"\\t,UpdatedByName as UPDATED_BY_NAME\\n\"\r\n",
					"\"\\t,UpdatedDate as UPDATED_DATE\\n\"\r\n",
					"\"\\t,DateLoaded as DATE_LOADED\\n\"\r\n",
					"\"\\t,DaysUntilDue as DAYS_UNTIL_DUE\\n\"\r\n",
					"\r\n",
					"\"\\t,'SolvSafety' as ETL_RECORD_SOURCE\\n\"\r\n",
					"\"\\t,true AS ETL_RECORD_IS_ACTIVE\\n\"\r\n",
					"\"\\t,'A' as ETL_RECORD_STATUS\\n\"\r\n",
					"\"\\t,'\"+ etlRunID +\"' as ETL_INSERT_RUN_ID\\n\"\r\n",
					"\"\\t,'\"+ etlRunID +\"' as ETL_UPDATE_RUN_ID\\n\"\r\n",
					"\"\\t,to_timestamp('\"+strloadTime+\"') as ETL_RECORD_INSERT_DATETIME\\n\"\r\n",
					"\"\\t,to_timestamp('\"+strloadTime+\"') as ETL_RECORD_UPDATE_DATETIME\\n\"\r\n",
					"\"\\t,'\"+etlLoadID+\"' AS ETL_LOAD_ID\\n\"\r\n",
					"\"FROM\\n\"\r\n",
					"\"\\t \"+tempTableName)\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.parquet(filePath)\r\n",
					"df.createOrReplaceTempView(tempTableName)\r\n",
					"sqlDF = spark.sql(strSQL)\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfInsert = set_df_columns_nullable(spark,sqlDF\r\n",
					",['SOLV_SAFE_EVENT_ACTIONS_BK','ACTION_ID','EVENT_BK','EVENT_ID','DATE_LOADED'\r\n",
					",'ETL_RECORD_SOURCE','ETL_RECORD_IS_ACTIVE','ETL_RECORD_STATUS','ETL_INSERT_RUN_ID','ETL_RECORD_INSERT_DATETIME','ETL_LOAD_ID']\r\n",
					",False)\r\n",
					"dfInsert = set_df_columns_nullable(spark,dfInsert,['ETL_UPDATE_RUN_ID','ETL_INSERT_RUN_ID'],True)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"if (dfInsert.count() != 0):\r\n",
					"    insertTarget(dfInsert,server,database,schema,tableName,'overwrite')"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rowsRead,rowsWritten = reconInsert(dfInsert,server,database,schema,tableName,etlRunID)\r\n",
					"outputRows = str(rowsRead)+'|'+str(rowsWritten)\r\n",
					"mssparkutils.notebook.exit(outputRows) "
				],
				"execution_count": null
			}
		]
	}
}